#!/bin/bash

# REQUIRED folder structure:
#
# /linux
# /busybox
# /[folderXY]/v2arm
# /[folderXY]/initramfs/
#



# dtb files
DTB_BCM=bcm2835-rpi-b.dtb
DTB_VEXPRESS=vexpress-v2p-ca9.dtb
DTB_VEXPRESS_PATH=arch/arm/boot/dts/$DTB_VEXPRESS

# versions
LINUX_VERSION=linux-3.16.6
BUSYBOX_VERSION=busybox-1.22.1

# cross compiler
CROSS_COMPILER=/group/labworks/toolchain/buildroot.git/output/host/usr/bin/arm-buildroot-linux-uclibcgnueabihf-

# kernel architecture
ARCH=arm
	
# paths
KERNEL_PATH=../$LINUX_VERSION
BUSYBOX_PATH=../$BUSYBOX_VERSION
BUILDROOT_PATH=../buildroot
INITRAMFS_PATH=initramfs
IMAGE_PATH="arch/arm/boot/zImage"
HOME_PATH=$PWD

# patch file
PATCH_NAME=linux-smsc95xx_allow_mac_setting.patch
PATCH_FILE=$HOME_PATH/patch/$PATCH_NAME

# --------
LINUX_PACKAGE=$LINUX_VERSION.tar.xz
LINUX_SOURCE=https://www.kernel.org/pub/linux/kernel/v3.x/$LINUX_PACKAGE
BUSYBOX_PACKAGE=$BUSYBOX_VERSION.tar.bz2
BUSYBOX_SOURCE=http://busybox.net/downloads/$BUSYBOX_PACKAGE


test()
{
	cd $BUILDROOT_PATH/output/images && QEMU_AUDIO_DRV=none qemu-system-arm -kernel zImage -m 128M -M vexpress-a9 \
	-nographic -append "root=/dev/ram initrd=/sbin/init console=ttyAMA0" \
	-initrd rootfs.cpio\
	-net nic,macaddr=00:00:00:00:00:1D,vlan=0\
	-net vde,sock="/tmp/vde2-tap0.ctl",vlan=0
}


################# all ###################
all()
{
		# load
		source
		
		# patch
		patch_kernel
		
		# set config
		config_kernel
		config_busybox
		
		# init
		init
		
		# compile
		compile_kernel
		make_bcm_dtb
}

############## run without loading #######
run() 
{		
		# start server
		qemu_net
}


################# initrd ################
init()
{
	# compile c app
	/group/labworks/toolchain/buildroot.git/output/host/usr/bin/arm-buildroot-linux-uclibcgnueabihf-gcc \
	-static -o scripts/start scripts/systeminfo.c 
	mv scripts/start $INITRAMFS_PATH/bin/start
	
	# compile busybox and copy in initramfs
	cd $BUSYBOX_PATH && make ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILER
	cd $HOME_PATH && cp $BUSYBOX_PATH/busybox initramfs/bin/
	
	# pack www folder and copy it into initramfs
	cd $HOME_PATH &&  tar cfv web.tar www/
	cd $HOME_PATH &&  tar cfv udhcpc.tar scripts/udhcpc/

}

################ buildroot ################
menu_buildroot() 
{
	cd $BUILDROOT_PATH && make ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILER menuconfig
}

compile_buildroot()
{
	cd $BUILDROOT_PATH && make source
	cd $BUILDROOT_PATH && make 
}

################# KERNEL ##################
menu_kernel()
{
	cd $KERNEL_PATH && make ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILER  menuconfig
}

compile_kernel()
{
	cd $KERNEL_PATH && make ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILER -j5
}

config_kernel()
{	
	cd $HOME_PATH && cp .config_kernel $KERNEL_PATH/.config
}

defconfig_kernel()
{	
	cd $HOME_PATH && cp bcmrpi_defconfig $KERNEL_PATH/.config
}


make_bcm_dtb() 
{
	cd $KERNEL_PATH && make ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILER $DTB_BCM
}


make_vexpress_dtb() 
{
	cd $KERNEL_PATH && make ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILER $DTB_VEXPRESS_PATH
}

patch_kernel()
{
	cd $KERNEL_PATH && make clean
	cd $KERNEL_PATH && patch -p1 < $PATCH_FILE
}

################# BUSYBOX ##################

config_busybox()
{	
	cd $HOME_PATH && cp .my_busybox_config $BUSYBOX_PATH/.config
}

menu_busybox()
{
	cd $BUSYBOX_PATH && make ARCH=$ARCH menuconfig
}

#################### QEMU ##################
qemu_start()
{
	cd $KERNEL_PATH && QEMU_AUDIO_DRV=none qemu-system-arm -kernel  $IMAGE_PATH -m 128M -M vexpress-a9 \
	-nographic -append "root=/dev/ram initrd=/sbin/init console=ttyAMA0" -initrd ../rootfs.cpio.gz
}

qemu_net()
{
	cd $KERNEL_PATH && QEMU_AUDIO_DRV=none qemu-system-arm -kernel $IMAGE_PATH -m 128M -M vexpress-a9 \
	-nographic -append "root=/dev/ram initrd=/sbin/init console=ttyAMA0" \
	-net nic,macaddr=00:00:00:00:00:1D,vlan=0\
	-net vde,sock="/tmp/vde2-tap0.ctl",vlan=0\
	-dtb $DTB_VEXPRESS_PATH
}

qemu_serial()
{
	cd $KERNEL_PATH && QEMU_AUDIO_DRV=none qemu-system-arm -kernel $IMAGE_PATH -m 128M -M vexpress-a9 \
	-nographic -serial pty -append "root=/dev/ram initrd=/sbin/init console=ttyAMA0" \
	-net nic,macaddr=00:00:00:00:00:1D,vlan=0\
	-net vde,sock="/tmp/vde2-tap0.ctl",vlan=0\
	-dtb $DTB_VEXPRESS_PATH
	
	# conect with ... screen /dev/pts/33
	# then... system_reset
}




################## SOURCE ###############
source()
{
	cd ..
	# linux source
	wget $LINUX_SOURCE
	tar xpvf $LINUX_PACKAGE 
	rm -f $LINUX_PACKAGE
	
	# busybox source
	wget $BUSYBOX_SOURCE
	tar xpvf $BUSYBOX_PACKAGE 
	rm -f $BUSYBOX_PACKAGE
	
	source_buildroot
}

source_buildroot()
{
	git clone git://git.buildroot.net/buildroot buildroot
	cd buildroot
	git reset --hard 80e406090893ab5a7b5d78e4d243d12fca2b22fb
	rm -rf .git
}


################# show info ###############
info() 
{
		echo 'QEMU'
		echo 'Machine Types:'
		qemu-system-arm -machine ?
}

################# clean  ##################
clean()
{
	cd $KERNEL_PATH && make mrproper
	cd $BUSYBOX_PATH && make clean
	cd $HOME_PATH && rm -f *.tar
	cd $HOME_PATH && rm -f *.log
	cd $HOME_PATH/initramfs/bin && rm -f busybox 
	cd $HOME_PATH/initramfs/bin && rm -f start

}


################## HELP ######################
help()
{
	echo "--------------------------------------------------------"
	echo "usage:"
	echo "./v2arm -e [function]"
	echo ""
	echo "functions:"
	echo ""
	echo "  SOURCE:"
	echo ".....source:			download linux source"
	echo ".....source_buildroot: get buildroot source"
	echo ""
	echo "  BUSYBOX:"
	echo ".....config_busybox: 	creates a busybox config"
	echo ""
	echo "  KERNEL:"		
	echo ".....config_kernel: 	creates a kernel config"
	echo ".....compile_kernel:	compile kernel"
	echo ".....patch_kernel:	patch kernel"
	echo ""
	echo "  BUILDROOT:"
	echo ".....compile_buildroot:	compile buildroot"	
	echo ""
	echo "  STUFF:"
	echo ".....init:			initialize all needed files for kernel"
	echo ".....qemu_net:		starts qemu with compiled kernel"
	echo ".....all:				does all above, without starting qemu"
	echo ".....run:				easy call for qemu_net"
	echo ".....clean:			clean ALL generated files (busybox, kernel, ..)"
	echo "........................................................"
	echo ".....menu_<X>			either <busybox> or <kernel> of <buildroot> for the menuconfig"
	echo "--------------------------------------------------------"
	
	
}

while getopts ":e:h" opt; do
		case $opt in
			e)
				cmd=$OPTARG
				;;
			h)	
				help
				;;
			:)
				echo "missing argument"
				;;
			?)
				help
				;;
			*)
				echo "not yet implemented"
				help
				;;
		esac
done

$cmd

