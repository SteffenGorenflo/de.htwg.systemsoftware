#!/bin/bash

# REQUIRED folder structure:
#
# /linux
# /busybox
# /[folderXY]/v2arm
# /[folderXY]/initramfs/
#

# versions
LINUX_VERSION=linux-3.16.6
BUSYBOX_VERSION=busybox-1.22.1

# cross compiler
CROSS_COMPILER=/group/labworks/toolchain/buildroot.git/output/host/usr/bin/arm-buildroot-linux-uclibcgnueabihf-

# kernel architecture
ARCH=arm

# paths
KERNEL_PATH=../$LINUX_VERSION
BUSYBOX_PATH=../$BUSYBOX_VERSION
INITRAMFS_PATH=initramfs
IMAGE_PATH="arch/arm/boot/zImage"
HOME_PATH=$PWD

# --------
LINUX_PACKAGE=$LINUX_VERSION.tar.xz
LINUX_SOURCE=https://www.kernel.org/pub/linux/kernel/v3.x/$LINUX_PACKAGE
BUSYBOX_PACKAGE=$BUSYBOX_VERSION.tar.bz2
BUSYBOX_SOURCE=http://busybox.net/downloads/$BUSYBOX_PACKAGE



################# all ###################
all()
{
		source
		defconfig_kernel
		defconfig_busybox
		compile_kernel
		compile_app
		initrd
		qemu_start
		
	
}


################# tools #################
compile_app()
{
	/group/labworks/toolchain/buildroot.git/output/host/usr/bin/arm-buildroot-linux-uclibcgnueabihf-gcc \
	-static -o start systeminfo.c 
	mv start $INITRAMFS_PATH/bin/start
}


################# initrd ################
initrd()
{
	cd $BUSYBOX_PATH && make ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILER

	# copy busybox into v2/initramfs/bin
	
	# 
	
	## copy start script und files for udhcpc
	#cd $HOME_PATH && cp -f $INITRAMFS_PATH/bin/startServer $BUSYBOX_PATH/_install/usr/bin/startServer
	#cd $BUSYBOX_PATH/_install/usr/bin && chmod +x startServer
	#cd $HOME_PATH && cp -r scripts/udhcp $BUSYBOX_PATH/_install/etc/udhcpc

	# create image
	#cd $BUSYBOX_PATH/_install && find . | cpio -o --format=newc > ../../rootfs.img
	#rm -rf $BUSYBOX_PATH/_install/


}

################# KERNEL ##################
menu_kernel()
{
	cd $KERNEL_PATH && make ARCH=$ARCH menuconfig
}

compile_kernel()
{
	cd $KERNEL_PATH && make ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILER -j4
}

defconfig_kernel()
{
	cd $KERNEL_PATH &&  make ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILER vexpress_defconfig
}


################# BUSYBOX ##################

defconfig_busybox()
{
	cd $BUSYBOX_PATH && make ARCH=$ARCH defconfig
}

menu_busybox()
{
	cd $BUSYBOX_PATH && make ARCH=$ARCH menuconfig
}

#################### QEMU ##################
qemu_start()
{
	cd $KERNEL_PATH && QEMU_AUDIO_DRV=none qemu-system-arm -initrd ../rootfs.cpio.gz -kernel  $IMAGE_PATH -m 128M -M vexpress-a9 \
	-nographic -append "root=/dev/ram initrd=/sbin/init console=ttyAMA0" 
}

qemu_net()
{
	cd $KERNEL_PATH && QEMU_AUDIO_DRV=none qemu-system-arm -kernel $IMAGE_PATH -M vexpress-a9 \
	-nographic -initrd ../rootfs.img -append "rdinit=/sbin/init console=ttyAMA0" \
	-net nic,model=lan9118, macaddr=00:00:00:00:00:A5 \
	-net vde,sock="/tmp/vde2-tab0.ct1"
}


################## SOURCE ###############
source()
{
	cd ..
	# linux source
	wget $LINUX_SOURCE
	tar xpvf $LINUX_PACKAGE
	rm -f $LINUX_PACKAGE
	
	# busybox source
	wget $BUSYBOX_SOURCE
	tar xpvf $BUSYBOX_PACKAGE
	rm -f $BUSYBOX_PACKAGE
}



################## HELP ######################
help()
{
	echo "--------------------------------------------------------"
	echo "usage:"
	echo "./v2arm -e [function]"
	echo ""
	echo "functions:"
	echo ".....source:		download linux source"
	echo ".....defconfig_kernel: 	creates a default kernel config"
	echo ".....defconfig_busybox: 	creates a default busybox config"
	echo ".....compile_kernel:		complie kernel"
	echo ".....qemu_start:	starts qemu with compiled kernel"
	echo "--------------------------------------------------------"
	
}

while getopts ":e:h" opt; do
		case $opt in
			e)
				cmd=$OPTARG
				;;
			h)	
				help
				;;
			:)
				echo "missing argument"
				;;
			?)
				help
				;;
			*)
				echo "not yet implemented"
				help
				;;
		esac
done

$cmd

